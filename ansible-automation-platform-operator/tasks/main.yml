---
- name: Setting Up Results Var
  ansible.builtin.set_fact:
    assessment_result: "pass"
# 1. Testing AutomationController
- name: Testing AutomationController
  block:
    - name: Create AutomationController
      kubernetes.core.k8s:
        name: aap-test
        namespace: "{{ target_namespace }}"
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        definition:
          metadata:
            labels:
              opdev: opcap
          spec:
            create_preload_data: true
            route_tls_termination_mechanism: Edge
            garbage_collect_secrets: false
            ingress_type: Route
            loadbalancer_port: 80
            no_log: false
            image_pull_policy: IfNotPresent
            projects_storage_size: 8Gi
            auto_upgrade: true
            task_privileged: false
            projects_storage_access_mode: ReadWriteMany
            set_self_labels: true
            projects_persistence: false
            replicas: 1
            admin_user: admin
            loadbalancer_protocol: http
            nodeport_port: 30080
            web_extra_env: 'CSRF_TRUSTED_ORIGINS=[*]'
        state: present
    - name: Test AutomationController conditions type Running
      kubernetes.core.k8s_info:
        namespace: "{{ target_namespace }}"
        name: aap-test
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        wait: true
        wait_condition:
          status: "True"
          type: "Running"
        wait_timeout: 300
      register: automationcontroller
      failed_when: (automationcontroller.resources[0].status.conditions | selectattr('type', 'search', 'Running') | list | last).status != "True"
    - name: Test AutomationController conditions type Failure
      kubernetes.core.k8s_info:
        namespace: "{{ target_namespace }}"
        name: aap-test
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        wait: true
        wait_condition:
          status: "False"
          type: "Failure"
        wait_timeout: 300
      register: automationcontroller
      failed_when: (automationcontroller.resources[0].status.conditions | selectattr('type', 'search', 'Failure') | list | last).status != "False"
    - name: Test AutomationController conditions type Successful
      kubernetes.core.k8s_info:
        namespace: "{{ target_namespace }}"
        name: aap-test
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        wait: true
        wait_condition:
          status: "True"
          type: "Successful"
        wait_timeout: 300
      register: automationcontroller
      failed_when: (automationcontroller.resources[0].status.conditions | selectattr('type', 'search', 'Failure') | list | last).status != "False"
  rescue:
    - name: Print when failed
      ansible.builtin.debug:
        msg: "AutomationController failed. Err: {{ ansible_failed_result }}"
    - name: Register failed tests
      ansible.builtin.set_fact:
        assessment_result: "fail"
# 2. Testing AAP Route
- name: Testing AAP UI
  block:
    - name: Verify the AAP UI is available
      ansible.builtin.uri:
        url: "{{ automationcontroller.resources[0].status.URL }}"
        validate_certs: false
  rescue:
    - name: Print when failed
      ansible.builtin.debug:
        msg: "Testing AAP UI failed. Err: {{ ansible_failed_result }}"
    - name: Register failed tests
      ansible.builtin.set_fact:
        assessment_result: "fail"
# 3. Cleanup
- name: Clean Up AutomationController
  block:
    - name: Delete AutomationController
      kubernetes.core.k8s:
        name: aap-test
        namespace: "{{ target_namespace }}"
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        state: absent
        wait: true
  rescue:
    - name: Print when failed
      ansible.builtin.debug:
        msg: "Error: Couldn't delete AutomationController"
# print pass or failed according to assessment_result fact variable
- name: Ansible Automation Platform Operator Results
  ansible.builtin.debug:
    msg: "{{ (assessment_result == 'pass') | ternary('PASS', 'FAIL') }}"
